{"version":3,"sources":["components/NavBar.jsx","components/DishComments.jsx","components/ReservationForm.jsx","components/Reservations.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","title","Toggle","aria-controls","Collapse","id","Nav","className","links","map","link","Link","toLowerCase","DishComments","selectedDish","ListGroup","name","comments","c","Item","comment","ReservationForm","state","reservation","phone","numberOfPersons","smoking","dateTime","specialRequests","handleInput","e","target","console","log","setState","checked","value","submitData","a","preventDefault","fetch","method","body","JSON","stringify","headers","ok","alert","Form","onSubmit","this","Group","Label","Control","type","placeholder","onChange","Check","label","as","rows","Button","React","Component","Reservations","isLoading","isError","reservations","componentDidMount","response","json","Spinner","animation","length","Alert","Heading","res","format","parseISO","_id","Home","items","Container","Row","Col","xs","md","Carousel","item","src","image","alt","onClick","Caption","description","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5de4723b.chunk.js","sourcesContent":["import { Navbar, Nav } from 'react-bootstrap'\n\nconst NavBar = (props) => (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">{props.title} - Strive for food</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"ml-auto\">\n                {\n                    props.links.map(link => <Nav.Link key={link} href={'#' + link.toLowerCase()}>{link}</Nav.Link>)\n                }\n            </Nav>\n        </Navbar.Collapse>\n    </Navbar>\n)\n\nexport default NavBar\n\n// functional components are a touch faster than class based ones\n","import { ListGroup } from 'react-bootstrap'\n\nconst DishComments = (props) =>\n    props.selectedDish\n        ? <ListGroup>\n            <h2>Comments for {props.selectedDish.name}</h2>\n            {\n                props.selectedDish.comments.map(c => (\n                    <ListGroup.Item key={c.id}>{c.comment}</ListGroup.Item>\n                ))\n            }\n        </ListGroup>\n        : <h1>NOTHING YET</h1>\n\n\nexport default DishComments\n\n// mapping props.selectedDish.comments","import React from 'react'\nimport { Button, Form } from 'react-bootstrap'\n\n// name\n// phone\n// numberOfPersons\n// smoking\n// dateTime\n// specialRequests\n\nclass ReservationForm extends React.Component {\n\n    state = {\n        reservation: {\n            name: '',\n            phone: '',\n            numberOfPersons: 1,\n            smoking: false,\n            dateTime: '',\n            specialRequests: ''\n        }\n    }\n\n    handleInput = (e) => {\n        let id = e.target.id // name or phone or numberOfPersons\n        console.log('ID OF THIS INPUT FIELD IS', id)\n\n        this.setState({\n            reservation: {\n                ...this.state.reservation,\n                [id]: id === 'smoking' ? e.target.checked : e.target.value // ex. name: 'Stefano', phone: '123'\n            }\n        })\n    }\n\n    submitData = async (e) => {\n        e.preventDefault()\n        try {\n            let response = await fetch(\"https://striveschool.herokuapp.com/api/reservation\", {\n                method: 'POST',\n                body: JSON.stringify(this.state.reservation),\n                headers: {\n                    'Content-type': 'application/json',\n                }\n            })\n            if (response.ok) {\n                alert('your reservation has been saved')\n                this.setState({\n                    reservation: {\n                        name: '',\n                        phone: '',\n                        numberOfPersons: 1,\n                        smoking: false,\n                        dateTime: '',\n                        specialRequests: ''\n                    }\n                })\n            } else {\n                alert('there was a problem')\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Book your table NOW!!</h2>\n                <Form onSubmit={this.submitData}>\n                    <Form.Group>\n                        <Form.Label>Your name</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            id=\"name\"\n                            placeholder=\"Enter your name\"\n                            // onChange={e => {\n                            //     this.setState({\n                            //         reservation: {\n                            //             ...this.state.reservation, // I'm adding to the new reservation all the existing\n                            //             // properties already in the state\n                            //             name: e.target.value\n                            //         }\n                            //     })\n                            // }}\n                            onChange={this.handleInput}\n                            value={this.state.reservation.name}\n                        />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Phone</Form.Label>\n                        <Form.Control\n                            type=\"number\"\n                            id=\"phone\"\n                            placeholder=\"Enter your phone\"\n                            // onChange={e => {\n                            //     this.setState({\n                            //         reservation: {\n                            //             ...this.state.reservation, // I'm adding to the new reservation all the existing\n                            //             // properties already in the state\n                            //             phone: e.target.value\n                            //         }\n                            //     })\n                            // }}\n                            onChange={this.handleInput}\n                            value={this.state.reservation.phone} />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Check\n                            type=\"checkbox\"\n                            id=\"smoking\"\n                            label=\"Smoking?\"\n                            onChange={this.handleInput}\n                            checked={this.state.reservation.smoking} />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>How many people?</Form.Label>\n                        <Form.Control\n                            id=\"numberOfPersons\"\n                            as=\"select\"\n                            value={this.state.reservation.numberOfPersons}\n                            onChange={this.handleInput}\n                        >\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            <option>6</option>\n                            <option>7</option>\n                            <option>8</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Date for the reservation</Form.Label>\n                        <Form.Control\n                            type=\"datetime-local\"\n                            id=\"dateTime\"\n                            onChange={this.handleInput}\n                            value={this.state.reservation.dateTime} />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Any special request?</Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            id=\"specialRequests\"\n                            rows={5}\n                            onChange={this.handleInput}\n                            value={this.state.reservation.specialRequests} />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </>\n        )\n    }\n}\n\nexport default ReservationForm","import React from 'react'\nimport { Alert, ListGroup, Spinner } from 'react-bootstrap'\nimport { format, parseISO } from 'date-fns'\n\n// render will be called ONCE after the constructor (for displaying the initial state of your component)\n// it will be called AGAIN every time there is a change in the state or in the props\n\nclass Reservations extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // this is really the first method invoked upon component construction\n        console.log('THIS IS THE CONSTRUCTOR')\n        // the constructor is useless for 90% of the time\n    }\n\n    // let's learn a couple of things about component lifecycle\n\n    state = {\n        isLoading: true,\n        isError: false,\n        reservations: []\n    }\n\n    componentDidMount = async () => {\n        // this will just happen once!!\n        console.log('THIS IS COMPONENTDIDMOUNT')\n        // componentDidMount is the PERFECT PLACE for fetching outside data and update our state\n        // fetch\n        try {\n            let response = await fetch('https://striveschool.herokuapp.com/api/reservation')\n            console.log(response)\n            if (response.ok) {\n                let reservations = await response.json()\n                console.log(reservations)\n                this.setState({\n                    // reservations: reservations\n                    reservations,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false,\n                    isError: true\n                })\n            }\n        } catch (error) {\n            this.setState({\n                isLoading: false,\n                isError: true\n            })\n            console.log(error)\n        }\n    }\n\n    render() {\n        console.log('THIS IS THE RENDER', this.state)\n        // render is triggered everytime the component is re-rendered\n        // a re-render happens every time there is a change in the STATE or in the PROPS of this component\n\n        // this.setState({\n        //     reservations: [{ name: 'Stefano', numberOfPersons: '5', dateTime: '9817984389' }]\n        // })\n        // THIS IS BAD, YOUR COMPONENT WILL BE STUCK INTO AN INFINITE LOOP\n\n        return (\n            <>\n                <h3>RESERVATIONS</h3>\n                <div className=\"my-3\">\n                    {/* here we'll put our map */}\n                    {this.state.isLoading && (<Spinner animation=\"border\" variant=\"success\" />)}\n\n                    {!this.state.isLoading\n                        && this.state.reservations.length === 0\n                        && !this.state.isError\n                        && <p>No reservations yet!</p>}\n\n                    {this.state.isError && (\n                        <Alert variant=\"danger\">\n                            <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n                            <p>\n                                Change this and that and try again. Duis mollis, est non commodo\n                                luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n                                Cras mattis consectetur purus sit amet fermentum.\n                            </p>\n                        </Alert>\n                    )}\n\n                    {this.state.reservations.map(res => (\n                        <ListGroup key={res._id}>\n                            <ListGroup.Item>\n                                <p>From: {res.name}, for {res.numberOfPersons} people,</p>\n                                {/* <p>at {res.dateTime}</p> */}\n                                <p>at {format(parseISO(res.dateTime), 'yyyy-MMM-dd | HH:mm')}</p>\n                            </ListGroup.Item>\n                        </ListGroup>\n                    ))}\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Reservations\n\n// whenever you need to fetch data for your component\n// you'll need a class based component\n\n// initially, the state is empty and so we're not displaying anything from our .map()\n// then componentDidMount happens and we fetch the data. then we save the data into the state\n// because there's a change in the state, react will invoke render() again\n// and now the array of reservations is filled up! so the map will output all the reservations","import React from 'react'\nimport { Carousel, Col, Container, Row } from 'react-bootstrap'\nimport items from '../data/menu.json'\nimport DishComments from './DishComments'\nimport ReservationForm from './ReservationForm'\nimport Reservations from './Reservations'\n\n// functional components are great to work with and they can use the props\n// but if we want to use the state, we need a CLASS BASED component\n\nclass Home extends React.Component {\n\n    state = {\n        selectedDish: items[0]\n    }\n\n    // constructor(props) {\n    //     super(props)\n    //     console.log('constructor invoked!')\n    //     this.state = {\n    //         selectedDish: null\n    //     }\n    // }\n\n    render() {\n        return (\n            <Container>\n                <Row className=\"justify-content-center mt-3\">\n                    <Col xs={12} md={6}>\n                        <h1>Welcome to Strivestaurant</h1>\n                        <p>The best dishes you can find on the web!</p>\n                        <Carousel\n                        // onSlide={(e) => this.setState({\n                        //     selectedDish: items[e]\n                        // })}\n                        >\n                            {\n                                items.map(item => (\n                                    <Carousel.Item key={item.id}>\n                                        <img\n                                            className=\"d-block w-100\"\n                                            src={item.image}\n                                            alt={item.name}\n                                            onClick={() => this.setState({\n                                                selectedDish: item\n                                            })}\n                                        />\n                                        <Carousel.Caption>\n                                            <h3>{item.name}</h3>\n                                            <p>{item.description}</p>\n                                        </Carousel.Caption>\n                                    </Carousel.Item>\n                                )\n                                )\n                            }\n                        </Carousel>\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-center mt-5\">\n                    <Col xs={8}>\n                        <Reservations />\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-center mt-5\">\n                    <Col xs={8}>\n                        <ReservationForm />\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-center mt-5\">\n                    <Col xs={8}>\n                        <DishComments selectedDish={this.state.selectedDish} />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default Home","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport NavBar from './components/NavBar'\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div>\n      <NavBar title=\"Strivestaurant\" links={['Home', 'Contacts', 'Location', 'blabla', 'Flynn']} />\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}